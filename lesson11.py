"""
РАЙНЕХАРТ
Наша компания - ведущая компания по разработке программного обеспечения в мире. 
И это все благодаря тому, что каждый отдельный служащий понимает, что он - часть целого. 
Таким образом, если служащий имеет проблему, это означает, что вся компания имеет проблему.
Пока ваша самая большая проблема, мистер Андерсон, что вы не выполнили в срок рабочее задание.
Пришло время делать выбор, мистер Андерсон. Либо вы сейчас же реализуете вычисление разностей BigInteger, 
либо вы будете вынуждены искать другую работу. Я ясно выражаюсь?
Требуется вычислить разницу между двумя целыми неотрицательными числами, заданными своим строковым 
представлением (например, "1234567890" и "321").
Числа задаются в диапазоне от 0 до 10^16 (включительно).
В некоторых языках есть поддержка так называемых BigInteger, которые потенциально не ограничены диапазонами, 
однако арифметические операции над ними выполняются не процессором, а эмуляционным кодом. 
По сути, для этих операций просто вызываются функции стандартных библиотек.
Возможно, в выбранном вами языке имеется поддержка BigInteger, однако в данной миссии надо обойтись без них.
Придумайте, как вычислять разность для любых заданных значений.
Функция
string BigMinus(string s1, string s2)
получает на вход два числа в формате строки (числа всегда корректные -- набор цифр), и возвращает абсолютное 
значение (модуль) разности -- первое число s1 минус второе число s2, также в формате строки.
Например,
BigMinus("1234567891", "1") = "1234567890"
BigMinus("1", "321") = "320"
"""


def BigMinus(s1, s2):

    if len(s1) == len(s2):
        for i in range(len(s1)):
            if int(s1[i]) > int(s2[i]):
                s_max = s1
                s_min = s2
                break
            else:
                s_min = s1
                s_max = s2
                break

    elif len(s1) < len(s2):
        s_min = s1
        s_max = s2
    else:
        s_max = s1
        s_min = s2
    N1 = len(s_max)
    N2 = len(s_min)

    nst = ""
    k = 1

    mark = 0

    for i in range((N1 - 1), -1, -1):

        el = int(s_max[i]) - mark

        if k <= N2:
            el = el - int(s_min[N2 - k])
            if el < 0:
                el = 10 + el
                nst += str(el)
                k += 1
                mark = 1

            else:
                nst += str(el)
                k += 1
                mark = 0

        elif k > N2 and el >= 0:
            nst += str(el)
            mark = 0

        elif k > N2 and el < 0:
            el = 10 + el
            nst += str(el)
            mark = 1

    result = nst[::-1]
    for i in range(len(result)-1):
        if int(result[0]) == 0:
            result = result[1:]

    return result
